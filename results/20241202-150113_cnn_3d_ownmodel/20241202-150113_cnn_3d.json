[{"model_name": "Basic3DCNN", "model": "Basic3DCNN(\n  (initblock): Block3D(\n    (block): Sequential(\n      (0): BatchNorm3d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (1): Dropout3d(p=0.05, inplace=True)\n      (2): Conv3d(3, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n      (3): ReLU(inplace=True)\n      (4): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (5): Dropout3d(p=0.05, inplace=True)\n      (6): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n      (7): ReLU(inplace=True)\n      (8): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (9): Dropout3d(p=0.05, inplace=True)\n      (10): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n      (11): ReLU(inplace=True)\n    )\n  )\n  (blocks): ModuleList(\n    (0-6): 7 x Block3D(\n      (block): Sequential(\n        (0): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (1): Dropout3d(p=0.05, inplace=True)\n        (2): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (3): ReLU(inplace=True)\n        (4): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (5): Dropout3d(p=0.05, inplace=True)\n        (6): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (7): ReLU(inplace=True)\n        (8): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (9): Dropout3d(p=0.05, inplace=True)\n        (10): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))\n        (11): ReLU(inplace=True)\n      )\n    )\n  )\n  (classifier): Sequential(\n    (0): AdaptiveAvgPool3d(output_size=(10, 10, 10))\n    (1): Flatten(start_dim=1, end_dim=-1)\n    (2): Dropout1d(p=0.2, inplace=False)\n    (3): Linear(in_features=32000, out_features=1024, bias=True)\n    (4): ReLU(inplace=True)\n    (5): Dropout1d(p=0.2, inplace=False)\n    (6): Linear(in_features=1024, out_features=10, bias=True)\n  )\n  (time_embed): Embedding(10, 1)\n)", "train_acc": [0.14, 0.172, 0.264, 0.304, 0.31, 0.366, 0.402, 0.446, 0.498, 0.458], "val_acc": [0.05, 0.16666666666666666, 0.13333333333333333, 0.08333333333333333, 0.13333333333333333, 0.125, 0.16666666666666666, 0.15833333333333333, 0.14166666666666666, 0.15], "train_loss": [29.321827345848085, 2.2315835933685304, 2.057647768974304, 1.962712239265442, 1.934010031223297, 1.8330042743682862, 1.6574555928707122, 1.5507154076099396, 1.3957671998739243, 1.5124029873609544], "val_loss": [2.376550078392029, 2.325622057914734, 2.426445786158244, 2.6096089522043866, 3.5971141616503397, 2.6018110235532124, 2.8491795301437377, 3.1656356612841288, 3.34539479414622, 2.921168545881907], "test_acc": 0.21666666666666667, "epochs": 10, "optimizer_config": {"optimizer": "<class 'torch.optim.adam.Adam'>", "params": {"lr": 0.001, "weight_decay": 0.0001}}, "description": "cnn_3d"}]