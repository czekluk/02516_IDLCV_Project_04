[{"model_name": "Pretrained3dCNN", "model": "Pretrained3dCNN(\n  (model): VideoResNet(\n    (stem): BasicStem(\n      (0): Conv3d(3, 64, kernel_size=(3, 7, 7), stride=(1, 2, 2), padding=(1, 3, 3), bias=False)\n      (1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n    )\n    (layer1): Sequential(\n      (0): BasicBlock(\n        (conv1): Sequential(\n          (0): Conv3DSimple(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU(inplace=True)\n        )\n        (conv2): Sequential(\n          (0): Conv3DSimple(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (relu): ReLU(inplace=True)\n        (dropout): Dropout3d(p=0.2, inplace=False)\n      )\n      (1): BasicBlock(\n        (conv1): Sequential(\n          (0): Conv3DSimple(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU(inplace=True)\n        )\n        (conv2): Sequential(\n          (0): Conv3DSimple(64, 64, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (relu): ReLU(inplace=True)\n        (dropout): Dropout3d(p=0.2, inplace=False)\n      )\n    )\n    (layer2): Sequential(\n      (0): BasicBlock(\n        (conv1): Sequential(\n          (0): Conv3DSimple(64, 128, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU(inplace=True)\n        )\n        (conv2): Sequential(\n          (0): Conv3DSimple(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv3d(64, 128, kernel_size=(1, 1, 1), stride=(2, 2, 2), bias=False)\n          (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (dropout): Dropout3d(p=0.2, inplace=False)\n      )\n      (1): BasicBlock(\n        (conv1): Sequential(\n          (0): Conv3DSimple(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU(inplace=True)\n        )\n        (conv2): Sequential(\n          (0): Conv3DSimple(128, 128, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (relu): ReLU(inplace=True)\n        (dropout): Dropout3d(p=0.2, inplace=False)\n      )\n    )\n    (layer3): Sequential(\n      (0): BasicBlock(\n        (conv1): Sequential(\n          (0): Conv3DSimple(128, 256, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU(inplace=True)\n        )\n        (conv2): Sequential(\n          (0): Conv3DSimple(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv3d(128, 256, kernel_size=(1, 1, 1), stride=(2, 2, 2), bias=False)\n          (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (dropout): Dropout3d(p=0.2, inplace=False)\n      )\n      (1): BasicBlock(\n        (conv1): Sequential(\n          (0): Conv3DSimple(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU(inplace=True)\n        )\n        (conv2): Sequential(\n          (0): Conv3DSimple(256, 256, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (relu): ReLU(inplace=True)\n        (dropout): Dropout3d(p=0.2, inplace=False)\n      )\n    )\n    (layer4): Sequential(\n      (0): BasicBlock(\n        (conv1): Sequential(\n          (0): Conv3DSimple(256, 512, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU(inplace=True)\n        )\n        (conv2): Sequential(\n          (0): Conv3DSimple(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv3d(256, 512, kernel_size=(1, 1, 1), stride=(2, 2, 2), bias=False)\n          (1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (dropout): Dropout3d(p=0.2, inplace=False)\n      )\n      (1): BasicBlock(\n        (conv1): Sequential(\n          (0): Conv3DSimple(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (2): ReLU(inplace=True)\n        )\n        (conv2): Sequential(\n          (0): Conv3DSimple(512, 512, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1), bias=False)\n          (1): BatchNorm3d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (relu): ReLU(inplace=True)\n        (dropout): Dropout3d(p=0.2, inplace=False)\n      )\n    )\n    (avgpool): AdaptiveAvgPool3d(output_size=(1, 1, 1))\n    (fc): Sequential(\n      (0): Dropout1d(p=0.1, inplace=False)\n      (1): Linear(in_features=512, out_features=1024, bias=True)\n      (2): ReLU(inplace=True)\n      (3): Dropout1d(p=0.1, inplace=False)\n      (4): Linear(in_features=1024, out_features=10, bias=True)\n    )\n  )\n)", "train_acc": [0.114, 0.088, 0.138, 0.116, 0.128, 0.14, 0.124, 0.114, 0.122, 0.148], "val_acc": [0.11666666666666667, 0.15, 0.1, 0.13333333333333333, 0.10833333333333334, 0.10833333333333334, 0.13333333333333333, 0.1, 0.15833333333333333, 0.125], "train_loss": [2.376655918121338, 2.297696135520935, 2.2780276203155516, 2.2745225830078124, 2.2900901832580565, 2.2754229583740235, 2.2404722023010253, 2.2850317792892456, 2.2944503250122072, 2.252967038154602], "val_loss": [3.3910409569740296, 2.362026274204254, 2.27708314259847, 2.260804518063863, 2.3108863751093547, 2.852890062332153, 2.2843902587890623, 2.308870061238607, 2.2434259176254274, 2.4926772594451903], "test_acc": 0.1, "epochs": 10, "optimizer_config": {"optimizer": "<class 'torch.optim.adam.Adam'>", "params": {"lr": 0.001, "weight_decay": 0.0001}}, "description": "cnn_3d"}]